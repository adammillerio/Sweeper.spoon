[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:\n * sweep - If true, this application will be swept.\n * sweepCheckInterval - Override time in seconds for global `Sweeper.sweepCheckInterval`.",
        "name" : "apps",
        "desc" : "Table containing each application's name and it's desired configuration. The",
        "stripped_doc" : [
          "Table containing each application's name and it's desired configuration. The",
          "key of each entry is the name of the application, and the value is a",
          "configuration table with the following entries:",
          " * sweep - If true, this application will be swept.",
          " * sweepCheckInterval - Override time in seconds for global `Sweeper.sweepCheckInterval`."
        ],
        "notes" : [

        ],
        "signature" : "Sweeper.apps",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Sweeper.apps",
        "parameters" : [

        ]
      },
      {
        "doc" : "Time in seconds to wait after a window loses focus to check if it should be swept.",
        "name" : "sweepCheckInterval",
        "desc" : "Time in seconds to wait after a window loses focus to check if it should be swept.",
        "stripped_doc" : [
          "Time in seconds to wait after a window loses focus to check if it should be swept."
        ],
        "notes" : [

        ],
        "signature" : "Sweeper.sweepCheckInterval",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Sweeper.sweepCheckInterval",
        "parameters" : [

        ]
      },
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.",
        "name" : "logger",
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log",
          "level for the messages coming from the Spoon."
        ],
        "notes" : [

        ],
        "signature" : "Sweeper.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Sweeper.logger",
        "parameters" : [

        ]
      },
      {
        "doc" : "Sweeper specific log level override, see hs.logger.setLogLevel for options.",
        "name" : "logLevel",
        "desc" : "Sweeper specific log level override, see hs.logger.setLogLevel for options.",
        "stripped_doc" : [
          "Sweeper specific log level override, see hs.logger.setLogLevel for options."
        ],
        "notes" : [

        ],
        "signature" : "Sweeper.logLevel",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Sweeper.logLevel",
        "parameters" : [

        ]
      },
      {
        "doc" : "Main hs.window.filter. This is what is used to detect and action on unfocused\nwindows. It is a copy of the \"default\" window filter with Sweeper specific\nsort order and callback configurations applied in the start method.",
        "name" : "windowFilter",
        "desc" : "Main hs.window.filter. This is what is used to detect and action on unfocused",
        "stripped_doc" : [
          "Main hs.window.filter. This is what is used to detect and action on unfocused",
          "windows. It is a copy of the \"default\" window filter with Sweeper specific",
          "sort order and callback configurations applied in the start method."
        ],
        "notes" : [

        ],
        "signature" : "Sweeper.windowFilter",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Sweeper.windowFilter",
        "parameters" : [

        ]
      },
      {
        "doc" : "Table containing all subscribed instance callbacks for the window filter, used\nduring shutdown.",
        "name" : "subscribedFunctions",
        "desc" : "Table containing all subscribed instance callbacks for the window filter, used",
        "stripped_doc" : [
          "Table containing all subscribed instance callbacks for the window filter, used",
          "during shutdown."
        ],
        "notes" : [

        ],
        "signature" : "Sweeper.subscribedFunctions",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Sweeper.subscribedFunctions",
        "parameters" : [

        ]
      }
    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "type" : "Module",
    "desc" : "Automatically hide apps that are out of focus.",
    "Constructor" : [

    ],
    "Field" : [

    ],
    "Method" : [
      {
        "doc" : "Spoon initializer method for Sweeper.\n\nParameters:\n * None\n\nReturns:\n * None",
        "name" : "init",
        "desc" : "Spoon initializer method for Sweeper.",
        "stripped_doc" : [
          "Spoon initializer method for Sweeper.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Sweeper:init()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "def" : "Sweeper:init()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Spoon start method for Sweeper.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Configures the window filter, and subscribes to all window unfocus events.",
        "name" : "start",
        "desc" : "Spoon start method for Sweeper.",
        "stripped_doc" : [
          "Spoon start method for Sweeper.",
          ""
        ],
        "notes" : [
          " * Configures the window filter, and subscribes to all window unfocus events."
        ],
        "signature" : "Sweeper:start()",
        "type" : "Method",
        "returns" : [
          " * None",
          ""
        ],
        "def" : "Sweeper:start()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Spoon stop method for Sweeper.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Unsubscribes the window filter from all subscribed functions.",
        "name" : "stop",
        "desc" : "Spoon stop method for Sweeper.",
        "stripped_doc" : [
          "Spoon stop method for Sweeper.",
          ""
        ],
        "notes" : [
          " * Unsubscribes the window filter from all subscribed functions."
        ],
        "signature" : "Sweeper:stop()",
        "type" : "Method",
        "returns" : [
          " * None",
          ""
        ],
        "def" : "Sweeper:stop()",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "doc" : "Automatically hide apps that are out of focus.\n\nDownload: https:\/\/github.com\/adammillerio\/Spoons\/raw\/main\/Spoons\/Sweeper.spoon.zip\n\nThis uses a hs.window.filter to detect windows that have gone out of focus. Then,\nif they are configured to be \"swept\" in the apps config, they will be automatically\nhidden if they remain out of focus after sweepCheckInterval (default 15 seconds).\n\nExample Usage (Using [SpoonInstall](https:\/\/zzamboni.org\/post\/using-spoons-in-hammerspoon\/)):\nspoon.SpoonInstall:andUse(\n  \"Sweeper\",\n  {\n    start = true\n  }\n)",
    "items" : [
      {
        "doc" : "Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:\n * sweep - If true, this application will be swept.\n * sweepCheckInterval - Override time in seconds for global `Sweeper.sweepCheckInterval`.",
        "name" : "apps",
        "desc" : "Table containing each application's name and it's desired configuration. The",
        "stripped_doc" : [
          "Table containing each application's name and it's desired configuration. The",
          "key of each entry is the name of the application, and the value is a",
          "configuration table with the following entries:",
          " * sweep - If true, this application will be swept.",
          " * sweepCheckInterval - Override time in seconds for global `Sweeper.sweepCheckInterval`."
        ],
        "notes" : [

        ],
        "signature" : "Sweeper.apps",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Sweeper.apps",
        "parameters" : [

        ]
      },
      {
        "doc" : "Sweeper specific log level override, see hs.logger.setLogLevel for options.",
        "name" : "logLevel",
        "desc" : "Sweeper specific log level override, see hs.logger.setLogLevel for options.",
        "stripped_doc" : [
          "Sweeper specific log level override, see hs.logger.setLogLevel for options."
        ],
        "notes" : [

        ],
        "signature" : "Sweeper.logLevel",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Sweeper.logLevel",
        "parameters" : [

        ]
      },
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.",
        "name" : "logger",
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log",
          "level for the messages coming from the Spoon."
        ],
        "notes" : [

        ],
        "signature" : "Sweeper.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Sweeper.logger",
        "parameters" : [

        ]
      },
      {
        "doc" : "Table containing all subscribed instance callbacks for the window filter, used\nduring shutdown.",
        "name" : "subscribedFunctions",
        "desc" : "Table containing all subscribed instance callbacks for the window filter, used",
        "stripped_doc" : [
          "Table containing all subscribed instance callbacks for the window filter, used",
          "during shutdown."
        ],
        "notes" : [

        ],
        "signature" : "Sweeper.subscribedFunctions",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Sweeper.subscribedFunctions",
        "parameters" : [

        ]
      },
      {
        "doc" : "Time in seconds to wait after a window loses focus to check if it should be swept.",
        "name" : "sweepCheckInterval",
        "desc" : "Time in seconds to wait after a window loses focus to check if it should be swept.",
        "stripped_doc" : [
          "Time in seconds to wait after a window loses focus to check if it should be swept."
        ],
        "notes" : [

        ],
        "signature" : "Sweeper.sweepCheckInterval",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Sweeper.sweepCheckInterval",
        "parameters" : [

        ]
      },
      {
        "doc" : "Main hs.window.filter. This is what is used to detect and action on unfocused\nwindows. It is a copy of the \"default\" window filter with Sweeper specific\nsort order and callback configurations applied in the start method.",
        "name" : "windowFilter",
        "desc" : "Main hs.window.filter. This is what is used to detect and action on unfocused",
        "stripped_doc" : [
          "Main hs.window.filter. This is what is used to detect and action on unfocused",
          "windows. It is a copy of the \"default\" window filter with Sweeper specific",
          "sort order and callback configurations applied in the start method."
        ],
        "notes" : [

        ],
        "signature" : "Sweeper.windowFilter",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Sweeper.windowFilter",
        "parameters" : [

        ]
      },
      {
        "doc" : "Spoon initializer method for Sweeper.\n\nParameters:\n * None\n\nReturns:\n * None",
        "name" : "init",
        "desc" : "Spoon initializer method for Sweeper.",
        "stripped_doc" : [
          "Spoon initializer method for Sweeper.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Sweeper:init()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "def" : "Sweeper:init()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Spoon start method for Sweeper.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Configures the window filter, and subscribes to all window unfocus events.",
        "name" : "start",
        "desc" : "Spoon start method for Sweeper.",
        "stripped_doc" : [
          "Spoon start method for Sweeper.",
          ""
        ],
        "notes" : [
          " * Configures the window filter, and subscribes to all window unfocus events."
        ],
        "signature" : "Sweeper:start()",
        "type" : "Method",
        "returns" : [
          " * None",
          ""
        ],
        "def" : "Sweeper:start()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Spoon stop method for Sweeper.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Unsubscribes the window filter from all subscribed functions.",
        "name" : "stop",
        "desc" : "Spoon stop method for Sweeper.",
        "stripped_doc" : [
          "Spoon stop method for Sweeper.",
          ""
        ],
        "notes" : [
          " * Unsubscribes the window filter from all subscribed functions."
        ],
        "signature" : "Sweeper:stop()",
        "type" : "Method",
        "returns" : [
          " * None",
          ""
        ],
        "def" : "Sweeper:stop()",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "name" : "Sweeper"
  }
]
